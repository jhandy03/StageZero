"""

Author(s): Jordan Handy

Last Updated: 06/14/2025

Description:
    GUI used for the test stand NorthStar for the Gallus Engine
    
Feature List:

TODO:
    make the whole thing a class
    
    
Notes:
    Before running, make sure the following libraries/packages are installed:
    - customtkinter
    - matplotlib
    - tkdial
    To install, use pip in the terminal as: pip install *library_name*
    To check current libraries, use pip list

"""
import customtkinter as ctk
from tkdial import Meter
import time
import matplotlib.pyplot as plt
# from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg   #use later for the thrust plot
from PIL import Image, ImageTk


class TestStandGUI:
    def __init__(self):
        self.create_gui()
        return
    
    def create_gui(self):
        root = ctk.CTk()
        root._state_before_windows_set_titlebar_color = 'zoomed'
        root.title("NorthStar Test Stand GUI")

        
        root.grid_columnconfigure(0, weight=1)
        root.grid_columnconfigure(1, weight=1)
        root.grid_columnconfigure(2, weight=1)
        root.grid_rowconfigure(0,weight=1)
        
        metric_frame = ctk.CTkFrame(root,border_width = 2, fg_color = "#4622D8")
        metric_frame.grid(row=0, column=0,sticky="nsew")

        metric_frame.grid_rowconfigure(0,weight=0)
        mass_flow_label = ctk.CTkLabel(metric_frame,text='Mass Flow Rate',font=('Computer Modern',20))
        mass_flow_label.grid(row=0, column=0,sticky='ns')

        metric_frame.grid_rowconfigure(1,weight=1)
        metric_frame.grid_rowconfigure(2,weight=0)
        metric_frame.grid_rowconfigure(3,weight=1)
        metric_frame.grid_rowconfigure(4,weight=0)
        metric_frame.grid_rowconfigure(5,weight=1)
        metric_frame.grid_columnconfigure(0,weight=1)
        
        thrust_frame = ctk.CTkFrame(root,border_width=2, fg_color = "#B82121")
        thrust_frame.grid(row=0, column=1,sticky="nsew")
        thrust_frame.grid_columnconfigure(0,weight=1)
        thrust_frame.grid_rowconfigure(0,weight=2)
        thrust_frame.grid_rowconfigure(1,weight=1)
        thrust_frame.grid_rowconfigure(2,weight=1)
        
        control_frame = ctk.CTkFrame(root,border_width=2,fg_color = "#2C885C")
        control_frame.grid(row=0, column=2,sticky="nsew")
        control_frame.grid_columnconfigure(0,weight=1)
        control_frame.grid_rowconfigure(0,weight=0)
        control_frame.grid_rowconfigure(1,weight=2)
        control_frame.grid_rowconfigure(2,weight=0)
        control_frame.grid_rowconfigure(3,weight=1)
        control_frame.grid_rowconfigure(4,weight=1)

        root.mainloop()
        
        
        
        
        
    
    def create_oximeter(self,parent=None):
        if parent is None:
            parent = self.root
        oxmeter = Meter(parent, fg="black", radius=250, start=0, end=2000, axis_color="#242424",
                       start_angle=225, end_angle=-270, text_color='white', text_font=("Courier New Bold", 20),
                       scale_color="white", scroll_steps=1, scroll=False, major_divisions=200)
        oxmeter.set(0)
        oxmeter.set_mark(0, 1170, "#92d050")
        oxmeter.set_mark(1171, 1760, "yellow")
        oxmeter.set_mark(1761, 2000, "red")
        
        for i, tick in enumerate(oxmeter.find_withtag('scale')):
            value = (i * (2000/100)) / 1000
            oxmeter.itemconfig(tick, text=f"{value:.3f}")
        
        oxmeter.itemconfig('text', text=f"{0/1000:.3f} kg/s")
        return oxmeter

    def create_fuelmeter(self,parent=None):
        if parent is None:
            parent = self.root
        fuelmeter = Meter(parent, fg="black", radius=250, start=0, end=350, axis_color="#242424",
                         start_angle=225, end_angle=-270, text_color='white', text_font=("Courier New Bold", 20),
                         scale_color="white", scroll_steps=1, scroll=False, major_divisions=25)
        fuelmeter.set(0)
        fuelmeter.set_mark(0, 210, "#92d050")
        fuelmeter.set_mark(211, 315, "yellow")
        fuelmeter.set_mark(316, 348, "red")

        for i, tick in enumerate(fuelmeter.find_withtag('scale')):
            value = (i * (348/100)) / 1000
            fuelmeter.itemconfig(tick, text=f"{value:.3f}")

        fuelmeter.itemconfig('text', text=f"{0/1000:.3f} kg/s")
        return fuelmeter

   
        return temp_container















































































































































































































































































































































































































































































































































































































































































































































































































    































































































































    






























































































































# balls lmao